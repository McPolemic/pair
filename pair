#!/usr/bin/env ruby
require 'getoptlong'
require 'tempfile'

def need_pairs!
  puts %q{Error: Set $PAIR before running. Example: $ PAIR="example name <example@example.com>"}
  exit
end

def usage_and_exit
  puts <<-EOF
    pair commit [OPTION]

    -h, --help:
       show help

    -m msg, --message msg:
        commit with the given message

    -t template_file, --template template_file:
        load the given template_file into an editor and commit with that message
  EOF
  exit
end

def message_specified?
  ARGV.include?('-m') || ARGV.include?('--message')
end

def template_specified?
  !template_index.nil?
end

# Look for a '-t' or '--template' flag. We use start_with? to search for
# arguments like --template=<file>
def template_index
  ARGV.rindex do |arg|
    arg.start_with?("-t") || arg.start_with?("--template")
  end
end

def message_flags(pairs)
  pairs.map do |pair|
    ["-m", "Co-authored-by: #{pair}"]
  end.flatten
end

# Load the template file argument. It can be in the forms
# -t <template_file>
# -t=<template_file>
# --template <template_file>
# --template=<template_file>
def provided_template_file
  template_flag = ARGV[template_index]

  if template_flag.include? "="
    template_flag.split("=", 2).last
  else
    ARGV[template_index + 1]
  end
end

def overwrite_template_file(pairs)
  file = Tempfile.new('git_template')
  input = File.read(provided_template_file)

  file.write(input)
  add_pairs_to_file(pairs, file)
end

def template_file(pairs)
  file = Tempfile.new('git_template')
  add_pairs_to_file(pairs, file)
end

def add_pairs_to_file(pairs, file)
  file.write("\n\n")

  pairs.each do |pair|
    file.write("Co-authored-by: #{pair}\n")
  end

  file.rewind
  file.path
end

def main
  subcommand = ARGV.shift
  usage_and_exit unless subcommand == "commit"

  pairs = ENV.fetch("PAIR", "").split(",")
  need_pairs! if pairs.empty?

  args = if message_specified?
           ARGV + message_flags(pairs)
         elsif template_specified?
           ARGV + ['-t', overwrite_template_file(pairs)]
         else
           ARGV + ['-t', template_file(pairs)]
         end

  puts IO.popen(['git', 'commit'] + args).read
end


main if __FILE__ == $0
