#!/usr/bin/env ruby
require 'getoptlong'
require 'tempfile'

def need_pairs!
  puts %q{Error: Set $PAIR before running. Example: $ PAIR="example name <example@example.com>"}
  exit
end

def usage_and_exit
  puts <<-EOF
    pair commit [OPTION]

    -h, --help:
       show help

    -m msg, --message msg:
        commit with the given message
  EOF
  exit
end

def message_specified?
  ARGV.include?('-m') || ARGV.include?('--message')
end

def template_specified?
  ARGV.include?('-t') || ARGV.include?('--template')
end

def message_flags(pairs)
  pairs.map do |pair|
    ["-m", "Co-authored-by: #{pair}"]
  end.flatten
end

def template_index
  ARGV.rindex("-t") || ARGV.rindex("--template")
end

def provided_template_file
  template_file_index = template_index + 1
  ARGV[template_file_index]
end

def overwrite_template_file(pairs)
  file = Tempfile.new('git_template')
  input = File.read(provided_template_file)

  file.write(input)
  file.write("\n\n")

  pairs.each do |pair|
    file.write("Co-authored-by: #{pair}\n")
  end

  file.rewind
  file.path
end

def template_file(pairs)
  file = Tempfile.new('git_template')
  file.write("\n\n")

  pairs.each do |pair|
    file.write("Co-authored-by: #{pair}\n")
  end

  file.rewind
  file.path
end

subcommand = ARGV.shift
raise "unsupported operation: #{subcommand}" unless subcommand == "commit"

pairs = ENV.fetch("PAIR", "").split(",")
need_pairs! if pairs.empty?

args = if message_specified?
         ARGV + message_flags(pairs)
       elsif template_specified?
         ARGV + ['-t', overwrite_template_file(pairs)]
       else
         ARGV + ['-t', template_file(pairs)]
       end

puts IO.popen(['git', 'commit'] + args).read
