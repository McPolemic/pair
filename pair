#!/usr/bin/env ruby
require 'getoptlong'
require 'tempfile'

def need_pairs!
  puts <<~EOF
    Error: Set $PAIR before running.

    Example:
        $ export PAIR="example name <example@example.com>"
  EOF
  exit
end

def usage_and_exit
  puts <<~EOF
    pair commit [OPTION]

    Adds pairing information when creating git commits

    -h, --help
       show help

    -m <msg>, --message <msg>
        commit with the given message

    -t <template_file>, --template <template_file>
        load the given template_file into an editor and commit with that message

    -F <commit_message_file>, --file <commit_message_file>
        use the contents of commit_message_file as the commit message
  EOF
  exit
end

def message_specified?
  ARGV.include?('-m') || ARGV.include?('--message')
end

def template_specified?
  template_index != nil
end

def message_file_specified?
  message_file_index != nil
end

# Look for a '-t' or '--template' flag. We use start_with? to search for
# arguments like --template=<file>
def template_index
  find_index_for_flags("-t", "--template")
end

# Look for a '-F' or '--file' flag. We use start_with? to search for
# arguments like --file=<file>
def message_file_index
  find_index_for_flags("-F", "--file")
end

# Search for all given flags and return the highest (last) index
# Example:
#   ARGV=["-t" "template_file" "--template=overwriting_template_file", "other_arg"]
#
#   find_index_for_flags("-t", "--template") # => 2
def find_index_for_flags(*flags)
  flags.map do |flag|
    ARGV.rindex do |arg|
      arg.start_with?(flag)
    end
  end.compact.max
end

def message_flags(pairs)
  pairs.map do |pair|
    ["-m", "Co-authored-by: #{pair}"]
  end.flatten
end

# Find a file argument when given an argument:
# Use what comes after an equals sign if it's present (e.g. --template=my_template_file)
# Otherwise, use the next argument (e.g. --file my_commit_file)
def provided_file_for_flag_index(flag_index)
  flag = ARGV[flag_index]

  if flag.include? "="
    flag.split("=", 2).last
  else
    ARGV[flag_index + 1]
  end
end

# Create a new temp file that is the original template file passed in, adding
# pair information
def overwrite_template_file(pairs)
  source_file = provided_file_for_flag_index(template_index)
  new_file_with_pair_info(pairs, source_file)
end

# Create a new temp file that is the original commit message file passed in,
# adding pair information
def overwrite_message_file(pairs)
  source_file = provided_file_for_flag_index(message_file_index)
  new_file_with_pair_info(pairs, source_file)
end

def new_file_with_pair_info(pairs, source_file_path)
  file = Tempfile.new('pair_file')
  input = File.read(source_file_path)

  file.write(input)
  add_pairs_to_file(pairs, file)
end

def paired_template_file(pairs)
  file = Tempfile.new('git_template')
  add_pairs_to_file(pairs, file)
end

def add_pairs_to_file(pairs, file)
  file.write("\n\n")

  pairs.each do |pair|
    file.write("Co-authored-by: #{pair}\n")
  end

  file.rewind
  file.path
end

def main
  subcommand = ARGV.shift
  usage_and_exit unless subcommand == "commit"

  pairs = ENV.fetch("PAIR", "").split(",")
  need_pairs! if pairs.empty?

  args = if message_specified?
           ARGV + message_flags(pairs)
         elsif template_specified?
           ARGV + ['-t', overwrite_template_file(pairs)]
         elsif message_file_specified?
           ARGV + ['-F', overwrite_message_file(pairs)]
         else
           ARGV + ['-t', paired_template_file(pairs)]
         end

  puts IO.popen(['git', 'commit'] + args).read
end


main if __FILE__ == $0
